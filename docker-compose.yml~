services:
  db-postgres-client:
    container_name: host-client
    image: postgres:12
    restart: unless-stopped
    environment:
      POSTGRES_DB: client_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d client_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - springcloud

  db-postgres-transactional:
    container_name: host-transactional
    image: postgres:12
    restart: unless-stopped
    environment:
      POSTGRES_DB: transactional_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5433:5432
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d transactional_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - springcloud

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - springcloud

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - springcloud

  eureka-server:
    container_name: eureka-server
    image: eureka_service:1.0.0
    ports:
      - '8761:8761'
    networks:
      - springcloud
    environment:
      - EUREKA_INSTANCE_HOSTNAME=eureka-server
    build:
      context: ./discover-server
      dockerfile: Dockerfile

  client-service:
    container_name: client-service
    depends_on:
      db-postgres-client:
        condition: service_healthy
    image: client-service:1.0.0
    environment:
      DB_HOST: host-client
      DB_PORT: 5432
      DB_NAME: client_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_HOST: eureka-server
    networks:
      - springcloud
    build:
      context: ./clientService
      dockerfile: dockerfile

  transactional-service:
    container_name: transactional-service
    depends_on:
      db-postgres-transactional:
        condition: service_healthy
    image: account-service:1.0.0
    environment:
      DB_HOST: host-transactional
      DB_PORT: 5432
      DB_NAME: transactional_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      EUREKA_HOST: eureka-server
    networks:
      - springcloud
    build:
      context: ./accountService
      dockerfile: dockerfile

  api-gateway:
    container_name: api-gateway
    depends_on:
      - eureka-server
    image: api-gateway:1.0.0
    ports:
      - 8888:8888
    networks:
      - springcloud
    environment:
      EUREKA_HOST: eureka-server
    build:
      context: ./api-gateway
      dockerfile: dockerfile

networks:
  springcloud:
    driver: bridge